// Copyright (C) 2019-2024, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

package block

import (
	"crypto"
	"testing"
	"time"

	"github.com/stretchr/testify/require"

	"github.com/ava-labs/avalanchego/ids"
	"github.com/ava-labs/avalanchego/staking"
	"github.com/ava-labs/avalanchego/utils/crypto/bls"
	"github.com/ava-labs/avalanchego/utils/hashing"
)

func TestBuild(t *testing.T) {
	require := require.New(t)

	parentID := ids.ID{1}
	timestamp := time.Unix(123, 0)
	pChainHeight := uint64(2)
	innerBlockBytes := []byte{3}
	chainID := ids.ID{4}
	networkID := uint32(5)
	parentBlockSig := []byte{}
	blsSignKey, err := bls.NewSecretKey()
	require.NoError(err)

	tlsCert, err := staking.NewTLSCert()
	require.NoError(err)

	cert, err := staking.ParseCertificate(tlsCert.Leaf.Raw)
	require.NoError(err)
	key := tlsCert.PrivateKey.(crypto.Signer)
	nodeID := ids.NodeIDFromCert(cert)

	vrfSig := NextBlockVRFSig(parentBlockSig, blsSignKey, chainID, networkID)
	builtBlock, err := Build(
		parentID,
		timestamp,
		pChainHeight,
		cert,
		innerBlockBytes,
		chainID,
		key,
		vrfSig,
	)
	require.NoError(err)

	require.Equal(parentID, builtBlock.ParentID())
	require.Equal(pChainHeight, builtBlock.PChainHeight())
	require.Equal(timestamp, builtBlock.Timestamp())
	require.Equal(innerBlockBytes, builtBlock.Block())
	require.Equal(nodeID, builtBlock.Proposer())
}

func TestBuildUnsigned(t *testing.T) {
	parentID := ids.ID{1}
	timestamp := time.Unix(123, 0)
	pChainHeight := uint64(2)
	innerBlockBytes := []byte{3}
	parentBlockSig := []byte{}

	require := require.New(t)

	builtBlock, err := BuildUnsigned(parentID, timestamp, pChainHeight, innerBlockBytes, parentBlockSig)
	require.NoError(err)

	require.Equal(parentID, builtBlock.ParentID())
	require.Equal(pChainHeight, builtBlock.PChainHeight())
	require.Equal(timestamp, builtBlock.Timestamp())
	require.Equal(innerBlockBytes, builtBlock.Block())
	require.Equal(ids.EmptyNodeID, builtBlock.Proposer())
}

func TestBuildHeader(t *testing.T) {
	require := require.New(t)

	chainID := ids.ID{1}
	parentID := ids.ID{2}
	bodyID := ids.ID{3}

	builtHeader, err := BuildHeader(
		chainID,
		parentID,
		bodyID,
	)
	require.NoError(err)

	require.Equal(chainID, builtHeader.ChainID())
	require.Equal(parentID, builtHeader.ParentID())
	require.Equal(bodyID, builtHeader.BodyID())
}

func TestBuildOption(t *testing.T) {
	require := require.New(t)

	parentID := ids.ID{1}
	innerBlockBytes := []byte{3}

	builtOption, err := BuildOption(parentID, innerBlockBytes)
	require.NoError(err)

	require.Equal(parentID, builtOption.ParentID())
	require.Equal(innerBlockBytes, builtOption.Block())
}

func TestCalculateVRFOut(t *testing.T) {
	require := require.New(t)

	testCases := []struct {
		vrfSig      []byte
		expectedOut []byte
	}{
		{nil, nil},
		{[]byte{}, nil},
		{[]byte{1}, nil},
		{[]byte{1, 2, 3}, nil},
		{make([]byte, 70), nil},
		{make([]byte, bls.SignatureLen+1), nil},
		{make([]byte, bls.SignatureLen), []byte{0xc9, 0x28, 0x64, 0xd4, 0x5a, 0x33, 0xac, 0xd4, 0x42, 0x10, 0xfa, 0x67, 0xda, 0x71, 0x9d, 0xa3, 0x48, 0x2b, 0xf8, 0xab, 0xb0, 0xbc, 0xbb, 0x9e, 0x48, 0x94, 0x4e, 0x2c, 0xd, 0x72, 0xd7, 0x9b}},
		{[]byte{0xc9, 0x28, 0x64, 0xd4, 0x5a, 0x33, 0xac, 0xd4, 0x42, 0x10, 0xfa, 0x67, 0xda, 0x71, 0x9d, 0xa3, 0x48, 0x2b, 0xf8, 0xab, 0xb0, 0xbc, 0xbb, 0x9e, 0x48, 0x94, 0x4e, 0x2c, 0xd, 0x72, 0xd7, 0x9b, 0xc9, 0x28, 0x64, 0xd4, 0x5a, 0x33, 0xac, 0xd4, 0x42, 0x10, 0xfa, 0x67, 0xda, 0x71, 0x9d, 0xa3, 0x48, 0x2b, 0xf8, 0xab, 0xb0, 0xbc, 0xbb, 0x9e, 0x48, 0x94, 0x4e, 0x2c, 0xd, 0x72, 0xd7, 0x9b, 0xc9, 0x28, 0x64, 0xd4, 0x5a, 0x33, 0xac, 0xd4, 0x42, 0x10, 0xfa, 0x67, 0xda, 0x71, 0x9d, 0xa3, 0x48, 0x2b, 0xf8, 0xab, 0xb0, 0xbc, 0xbb, 0x9e, 0x48, 0x94, 0x4e, 0x2c, 0xd, 0x72, 0xd7, 0x9b}, []byte{0x47, 0x32, 0x0, 0x92, 0x9, 0x6c, 0x5e, 0x32, 0x3b, 0x6, 0x38, 0xec, 0xef, 0x5b, 0xa5, 0x80, 0x65, 0xff, 0xea, 0x2e, 0xd4, 0x7e, 0x76, 0xb, 0x5c, 0x2e, 0x25, 0xd1, 0xd6, 0x40, 0xcb, 0x0}},
	}
	for _, testCase := range testCases {
		require.Equal(testCase.expectedOut, CalculateVRFOut(testCase.vrfSig))
	}
}

func TestCalculateBootstrappingBlockSig(t *testing.T) {
	require := require.New(t)

	testCases := []struct {
		chainID     ids.ID
		networkID   uint32
		expectedOut [hashing.HashLen]byte
	}{
		{ids.ID(make([]byte, hashing.HashLen)), 0, [hashing.HashLen]byte{0x77, 0x0, 0xf5, 0x5d, 0x4e, 0x85, 0xe8, 0xe6, 0x69, 0xb6, 0x4a, 0xbb, 0x56, 0x17, 0x4d, 0x59, 0xdd, 0x11, 0x2e, 0xd5, 0x79, 0x66, 0x47, 0x13, 0x1f, 0xcf, 0xb7, 0x46, 0x5f, 0x5f, 0x57, 0xe0}},
		{ids.ID(hashing.ComputeHash256Array([]byte{1, 2, 3})), 0, [hashing.HashLen]byte{0x77, 0x65, 0xa9, 0x88, 0x83, 0x40, 0x82, 0x5f, 0x58, 0xf1, 0xf9, 0xb, 0x73, 0xab, 0xe8, 0xff, 0x8b, 0x7c, 0xf2, 0xa0, 0x86, 0xe5, 0xd5, 0x4a, 0x1e, 0x11, 0xe6, 0x9e, 0x35, 0x9c, 0x37, 0xb2}},
		{ids.ID(make([]byte, hashing.HashLen)), 2, [hashing.HashLen]byte{0x49, 0xe4, 0xcb, 0xbf, 0xf5, 0x1d, 0x8c, 0x12, 0xf7, 0x4d, 0xb6, 0x2, 0xf2, 0xdd, 0x7b, 0x4c, 0xe5, 0xcd, 0x97, 0xbd, 0x3c, 0x49, 0x7f, 0xb0, 0x94, 0x9c, 0x88, 0x30, 0xd0, 0x5c, 0xc5, 0x35}},
		{ids.ID(hashing.ComputeHash256Array([]byte{0x77, 0x65, 0xa9, 0x88, 0x83, 0x40, 0x82, 0x5f, 0x58, 0xf1, 0xf9, 0xb, 0x73, 0xab, 0xe8, 0xff, 0x8b, 0x7c, 0xf2, 0xa0, 0x86, 0xe5, 0xd5, 0x4a, 0x1e, 0x11, 0xe6, 0x9e, 0x35, 0x9c, 0x37, 0xb2})), 0, [hashing.HashLen]byte{0xf7, 0x18, 0x86, 0x80, 0xb5, 0xb3, 0x5e, 0xe6, 0xd1, 0x58, 0xf4, 0x66, 0x9, 0x73, 0x67, 0x35, 0x87, 0x4d, 0x5b, 0x8d, 0xac, 0x16, 0x5d, 0xf8, 0x5e, 0x46, 0x3a, 0x61, 0x0, 0x74, 0xf8, 0x97}},
		{ids.ID(hashing.ComputeHash256Array([]byte{0x77, 0x65, 0xa9, 0x88, 0x83, 0x40, 0x82, 0x5f, 0x58, 0xf1, 0xf9, 0xb, 0x73, 0xab, 0xe8, 0xff, 0x8b, 0x7c, 0xf2, 0xa0, 0x86, 0xe5, 0xd5, 0x4a, 0x1e, 0x11, 0xe6, 0x9e, 0x35, 0x9c, 0x37, 0xb2})), 4, [hashing.HashLen]byte{0xc9, 0xbb, 0x15, 0xbd, 0x5b, 0x7e, 0xee, 0xa, 0xde, 0x8a, 0x6f, 0xd0, 0x65, 0x71, 0x73, 0xf8, 0x58, 0xd9, 0xa8, 0x32, 0x7d, 0x90, 0xb0, 0xf4, 0x96, 0x74, 0x7e, 0x42, 0x7e, 0xd9, 0x4f, 0x34}},
	}
	for _, testCase := range testCases {
		require.Equal(testCase.expectedOut, calculateBootstrappingBlockSig(testCase.chainID, testCase.networkID))
	}
}

func TestNextHashBlockSignature(t *testing.T) {
	require := require.New(t)

	testCases := []struct {
		vrfSig      []byte
		expectedOut []byte
	}{
		{nil, nil},
		{[]byte{}, nil},
		{[]byte{1}, []byte{0x4b, 0xf5, 0x12, 0x2f, 0x34, 0x45, 0x54, 0xc5, 0x3b, 0xde, 0x2e, 0xbb, 0x8c, 0xd2, 0xb7, 0xe3, 0xd1, 0x60, 0xa, 0xd6, 0x31, 0xc3, 0x85, 0xa5, 0xd7, 0xcc, 0xe2, 0x3c, 0x77, 0x85, 0x45, 0x9a}},
		{[]byte{1, 2, 3}, []byte{0x3, 0x90, 0x58, 0xc6, 0xf2, 0xc0, 0xcb, 0x49, 0x2c, 0x53, 0x3b, 0xa, 0x4d, 0x14, 0xef, 0x77, 0xcc, 0xf, 0x78, 0xab, 0xcc, 0xce, 0xd5, 0x28, 0x7d, 0x84, 0xa1, 0xa2, 0x1, 0x1c, 0xfb, 0x81}},
		{[]byte{0xc9, 0x28, 0x64, 0xd4, 0x5a, 0x33, 0xac, 0xd4, 0x42, 0x10, 0xfa, 0x67, 0xda, 0x71, 0x9d, 0xa3, 0x48, 0x2b, 0xf8, 0xab, 0xb0, 0xbc, 0xbb, 0x9e, 0x48, 0x94, 0x4e, 0x2c, 0xd, 0x72, 0xd7, 0x9b, 0xc9, 0x28, 0x64, 0xd4, 0x5a, 0x33, 0xac, 0xd4, 0x42, 0x10, 0xfa, 0x67, 0xda, 0x71, 0x9d, 0xa3, 0x48, 0x2b, 0xf8, 0xab, 0xb0, 0xbc, 0xbb, 0x9e, 0x48, 0x94, 0x4e, 0x2c, 0xd, 0x72, 0xd7, 0x9b, 0xc9, 0x28, 0x64, 0xd4, 0x5a, 0x33, 0xac, 0xd4, 0x42, 0x10, 0xfa, 0x67, 0xda, 0x71, 0x9d, 0xa3, 0x48, 0x2b, 0xf8, 0xab, 0xb0, 0xbc, 0xbb, 0x9e, 0x48, 0x94, 0x4e, 0x2c, 0xd, 0x72, 0xd7, 0x9b}, []byte{0x69, 0x0, 0xec, 0x74, 0x7c, 0x77, 0xba, 0x38, 0x30, 0x38, 0xe8, 0x93, 0xae, 0x49, 0x17, 0x4, 0x32, 0x4, 0x1d, 0x7, 0xd0, 0x31, 0xc1, 0x1a, 0x7b, 0xc8, 0xdb, 0x89, 0x3f, 0xd5, 0x9e, 0x31}},
	}
	for _, testCase := range testCases {
		require.Equal(testCase.expectedOut, NextHashBlockSignature(testCase.vrfSig))
	}
}
